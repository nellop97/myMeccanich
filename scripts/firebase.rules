// firestore.rules - Firebase Firestore Security Rules
// MODIFICHE: Aggiunte regole per supportare mechanicId e collection reviews

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // HELPER FUNCTIONS
    // ============================================

    // Verifica se l'utente è autenticato
    function isAuthenticated() {
      return request.auth != null;
    }

    // Verifica se l'utente è il proprietario
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Verifica se l'utente è un meccanico
    function isMechanic() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'mechanic';
    }

    // Verifica se l'utente è il meccanico proprietario
    function isMechanicOwner(mechanicId) {
      return isAuthenticated() && request.auth.uid == mechanicId && isMechanic();
    }

    // Verifica validità dei dati (evita injection e dati mancanti)
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }

    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Lettura singola: solo il proprietario o meccanici autenticati
      allow get: if isOwner(userId) || isMechanic();

      // Lettura query: utenti autenticati possono cercare meccanici (per ricerca officine)
      // Limitato ai soli meccanici tramite query where('userType', '==', 'mechanic')
      allow list: if isAuthenticated() &&
                     request.query.limit <= 20;

      // Scrittura: solo il proprietario
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // ============================================
    // VEHICLES COLLECTION (veicoli utenti)
    // ============================================
    match /vehicles/{vehicleId} {
      // Lettura: chiunque autenticato può leggere (necessario per ricerca veicoli)
      // In alternativa, solo proprietario o condiviso:
      // allow read: if isAuthenticated() && (
      //   resource.data.userId == request.auth.uid ||
      //   resource.data.ownerId == request.auth.uid ||
      //   request.auth.uid in resource.data.get('sharedWith', [])
      // );
      allow read: if isAuthenticated();

      // Creazione: solo utenti autenticati per se stessi
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid
      );

      // Aggiornamento: solo il proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid
      );

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid
      );
    }

    // ============================================
    // WORKSHOP CARS COLLECTION (veicoli in officina)
    // ============================================
    // MODIFICATO: Aggiunto supporto per mechanicId e permessi owner
    match /workshop_cars/{carId} {
      // Lettura: meccanico proprietario o cliente proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.workshopId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid
      );

      // Creazione: meccanici per la propria officina OPPURE owner per le proprie auto
      allow create: if isAuthenticated() && (
        (isMechanic() && (
          request.resource.data.workshopId == request.auth.uid ||
          request.resource.data.mechanicId == request.auth.uid
        )) ||
        request.resource.data.ownerId == request.auth.uid
      );

      // Aggiornamento: meccanico proprietario o owner del veicolo
      allow update: if isAuthenticated() && (
        isMechanicOwner(resource.data.get('workshopId', resource.data.mechanicId)) ||
        resource.data.ownerId == request.auth.uid
      );

      // Cancellazione: meccanico proprietario o owner del veicolo
      allow delete: if isAuthenticated() && (
        isMechanicOwner(resource.data.get('workshopId', resource.data.mechanicId)) ||
        resource.data.ownerId == request.auth.uid
      );
    }

    // ============================================
    // WORKSHOP CARS COLLECTION - VARIANTE CAMELCASE
    // ============================================
    // NOTA: Supporto per inconsistenza naming (workshopCars vs workshop_cars)
    match /workshopCars/{carId} {
      // Lettura: meccanico proprietario o cliente proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.workshopId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid
      );

      // Creazione: meccanici per la propria officina OPPURE owner per le proprie auto
      allow create: if isAuthenticated() && (
        (isMechanic() && (
          request.resource.data.workshopId == request.auth.uid ||
          request.resource.data.mechanicId == request.auth.uid
        )) ||
        request.resource.data.ownerId == request.auth.uid
      );

      // Aggiornamento: meccanico proprietario o owner del veicolo
      allow update: if isAuthenticated() && (
        isMechanicOwner(resource.data.get('workshopId', resource.data.mechanicId)) ||
        resource.data.ownerId == request.auth.uid
      );

      // Cancellazione: meccanico proprietario o owner del veicolo
      allow delete: if isAuthenticated() && (
        isMechanicOwner(resource.data.get('workshopId', resource.data.mechanicId)) ||
        resource.data.ownerId == request.auth.uid
      );
    }

    // ============================================
    // APPOINTMENTS COLLECTION
    // ============================================
    // MODIFICATO: Aggiunto supporto per mechanicId
    match /appointments/{appointmentId} {
      // Lettura: meccanico o cliente coinvolto
      allow read: if isAuthenticated() && (
        resource.data.workshopId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.customerId == request.auth.uid
      );

      // Creazione: meccanici per la propria officina o clienti
      allow create: if isAuthenticated() && (
        (isMechanic() && (
          request.resource.data.workshopId == request.auth.uid ||
          request.resource.data.mechanicId == request.auth.uid
        )) ||
        request.resource.data.customerId == request.auth.uid
      ) && hasRequiredFields(['customerId', 'scheduledDate', 'description']);

      // Aggiornamento: meccanico o cliente proprietario
      allow update: if isAuthenticated() && (
        resource.data.workshopId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.customerId == request.auth.uid
      );

      // Cancellazione: solo il meccanico o il cliente
      allow delete: if isAuthenticated() && (
        resource.data.workshopId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.customerId == request.auth.uid
      );
    }

    // ============================================
    // CUSTOMERS COLLECTION
    // ============================================
    match /customers/{customerId} {
      // Lettura: meccanico proprietario o il cliente stesso
      allow read: if isAuthenticated() && (
        resource.data.mechanicId == request.auth.uid ||
        resource.data.userId == request.auth.uid
      );

      // Creazione: solo meccanici per i propri clienti
      allow create: if isMechanic() &&
                      request.resource.data.mechanicId == request.auth.uid &&
                      hasRequiredFields(['name', 'email', 'mechanicId']);

      // Aggiornamento: meccanico proprietario
      allow update: if isMechanicOwner(resource.data.mechanicId);

      // Cancellazione: meccanico proprietario
      allow delete: if isMechanicOwner(resource.data.mechanicId);
    }

    // ============================================
    // MAINTENANCE RECORDS COLLECTION
    // ============================================
    match /maintenance_records/{recordId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto, meccanico, o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Creazione: utenti per i propri veicoli o meccanici
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        (isMechanic() && request.resource.data.mechanicId == request.auth.uid) ||
        ownsVehicle(request.resource.data.vehicleId)
      );

      // Aggiornamento: proprietario o meccanico che ha creato il record
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );
    }

    // ============================================
    // INVOICES COLLECTION
    // ============================================
    match /invoices/{invoiceId} {
      // Lettura: meccanico o cliente coinvolto
      allow read: if isAuthenticated() && (
        resource.data.mechanicId == request.auth.uid ||
        resource.data.customerId == request.auth.uid
      );

      // Creazione: solo meccanici per i propri clienti
      allow create: if isMechanic() &&
                      request.resource.data.mechanicId == request.auth.uid &&
                      hasRequiredFields(['customerId', 'totalAmount', 'items']);

      // Aggiornamento: solo il meccanico proprietario
      allow update: if isMechanicOwner(resource.data.mechanicId);

      // Cancellazione: solo il meccanico proprietario
      allow delete: if isMechanicOwner(resource.data.mechanicId);
    }

    // ============================================
    // REVIEWS COLLECTION
    // ============================================
    // AGGIUNTA: Nuova regola per le recensioni
    match /reviews/{reviewId} {
      // Lettura: tutti gli utenti autenticati possono leggere
      allow read: if isAuthenticated();

      // Creazione: solo utenti autenticati per clienti
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      hasRequiredFields(['mechanicId', 'rating', 'userId']);

      // Aggiornamento: solo l'autore della recensione
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Cancellazione: solo l'autore
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ============================================
    // EXPENSES COLLECTION
    // ============================================
    match /expenses/{expenseId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );

      // Creazione: utenti autenticati per se stessi o per i propri veicoli
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        (request.resource.data.get('vehicleId', null) != null && ownsVehicle(request.resource.data.vehicleId))
      );

      // Aggiornamento: solo il proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );
    }

    // ============================================
    // FUEL RECORDS COLLECTION
    // ============================================
    match /fuel_records/{recordId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Creazione: utenti autenticati per i propri veicoli
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        ownsVehicle(request.resource.data.vehicleId)
      );

      // Aggiornamento: solo il proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );
    }

    // ============================================
    // DOCUMENTS COLLECTION
    // ============================================
    match /documents/{documentId} {
      // Lettura: proprietario o meccanico condiviso
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.get('sharedWith', [])
      );

      // Creazione: utenti autenticati
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Aggiornamento: solo il proprietario
      allow update: if isOwner(resource.data.userId);

      // Cancellazione: solo il proprietario
      allow delete: if isOwner(resource.data.userId);
    }

    // ============================================
    // REMINDERS COLLECTION
    // ============================================
    match /reminders/{reminderId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );

      // Creazione: utenti autenticati per se stessi o per i propri veicoli
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        (request.resource.data.get('vehicleId', null) != null && ownsVehicle(request.resource.data.vehicleId))
      );

      // Aggiornamento: solo il proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        (resource.data.get('vehicleId', null) != null && ownsVehicle(resource.data.vehicleId))
      );
    }

    // ============================================
    // DEADLINES COLLECTION
    // ============================================
    match /deadlines/{deadlineId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Creazione: utenti autenticati per i propri veicoli
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        ownsVehicle(request.resource.data.vehicleId)
      );

      // Aggiornamento: proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Cancellazione: proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );
    }

    // ============================================
    // ACTIVITIES COLLECTION
    // ============================================
    match /activities/{activityId} {
      // Helper: verifica proprietà del veicolo
      function ownsVehicle(vehicleId) {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid
        );
      }

      // Lettura: proprietario diretto o proprietario del veicolo
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Creazione: utenti autenticati per i propri veicoli
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.ownerId == request.auth.uid ||
        ownsVehicle(request.resource.data.vehicleId)
      );

      // Aggiornamento: proprietario
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );

      // Cancellazione: proprietario
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.ownerId == request.auth.uid ||
        ownsVehicle(resource.data.vehicleId)
      );
    }

    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    match /notifications/{notificationId} {
      // Lettura: solo il destinatario
      allow read: if isOwner(resource.data.userId);

      // Creazione: qualsiasi utente autenticato (per notifiche di sistema)
      allow create: if isAuthenticated();

      // Aggiornamento: solo il destinatario (per marcare come letto)
      allow update: if isOwner(resource.data.userId);

      // Cancellazione: solo il destinatario
      allow delete: if isOwner(resource.data.userId);
    }

    // ============================================
    // VEHICLE TRANSFERS COLLECTION
    // ============================================
    match /vehicle_transfers/{transferId} {
      // Lettura: venditore o acquirente
      allow read: if isAuthenticated() && (
        resource.data.sellerId == request.auth.uid ||
        resource.data.buyerEmail == request.auth.token.email
      );

      // Creazione: solo il venditore
      allow create: if isAuthenticated() &&
                      request.resource.data.sellerId == request.auth.uid &&
                      hasRequiredFields(['vehicleId', 'sellerId', 'buyerEmail', 'transferPin']);

      // Aggiornamento: venditore o acquirente
      allow update: if isAuthenticated() && (
        resource.data.sellerId == request.auth.uid ||
        resource.data.buyerEmail == request.auth.token.email
      );

      // Cancellazione: solo il venditore
      allow delete: if isOwner(resource.data.sellerId);
    }

    // ============================================
    // CAR TRANSFER REQUESTS COLLECTION (legacy)
    // ============================================
    match /carTransferRequests/{requestId} {
      // Lettura: mittente o destinatario
      allow read: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserEmail == request.auth.token.email
      );

      // Creazione: utente autenticato
      allow create: if isAuthenticated();

      // Aggiornamento: mittente o destinatario
      allow update: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserEmail == request.auth.token.email
      );

      // Cancellazione: solo il mittente
      allow delete: if isAuthenticated() && resource.data.fromUserId == request.auth.uid;
    }

    // ============================================
    // TRANSFER LOGS COLLECTION
    // ============================================
    match /transferLogs/{logId} {
      // Lettura: utenti coinvolti nel trasferimento
      allow read: if isAuthenticated() && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid
      );

      // Creazione: utenti autenticati
      allow create: if isAuthenticated();

      // Nessun aggiornamento o cancellazione
      allow update, delete: if false;
    }

    // ============================================
    // VEHICLE VIEW REQUESTS COLLECTION
    // ============================================
    match /vehicle_view_requests/{requestId} {
      // Lettura: proprietario del veicolo o richiedente
      allow read: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.requesterEmail == request.auth.token.email
      );

      // Creazione: chiunque autenticato può creare una richiesta
      allow create: if isAuthenticated() &&
                      hasRequiredFields(['vehicleId', 'ownerId', 'requesterName', 'requesterEmail']);

      // Aggiornamento:
      // - Proprietario può approvare/rifiutare (cambiare status, visibleData, etc.)
      // - Richiedente può solo incrementare viewsCount quando status è 'approved'
      allow update: if isAuthenticated() && (
        // Proprietario può aggiornare tutto
        resource.data.ownerId == request.auth.uid ||
        // Richiedente può aggiornare SOLO viewsCount, lastViewedAt, updatedAt quando approved
        (resource.data.requesterEmail == request.auth.token.email &&
         resource.data.status == 'approved' &&
         // Verifica che solo questi campi vengano modificati
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewsCount', 'lastViewedAt', 'updatedAt']) &&
         // Verifica che viewsCount sia incrementato di 1
         request.resource.data.viewsCount == resource.data.viewsCount + 1)
      );

      // Cancellazione: solo il proprietario del veicolo
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // ============================================
    // VEHICLE VIEW LOGS COLLECTION
    // ============================================
    match /vehicle_view_logs/{logId} {
      // Lettura: utente coinvolto nel log
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Creazione: utenti autenticati
      allow create: if isAuthenticated();

      // Nessun aggiornamento o cancellazione (solo audit)
      allow update, delete: if false;
    }

    // ============================================
    // ACCESS LOGS COLLECTION (solo lettura, creazione da cloud functions)
    // ============================================
    match /access_logs/{logId} {
      // Lettura: solo il proprietario del log
      allow read: if isOwner(resource.data.userId);

      // Creazione: solo da backend/cloud functions
      allow create: if false;

      // Nessun aggiornamento o cancellazione
      allow update, delete: if false;
    }

    // ============================================
    // WORKSHOP SETTINGS COLLECTION
    // ============================================
    match /workshop_settings/{settingId} {
      // Lettura: solo il meccanico proprietario
      allow read: if isMechanicOwner(settingId);

      // Creazione: meccanico per se stesso
      allow create: if isMechanic() && settingId == request.auth.uid;

      // Aggiornamento: solo il proprietario
      allow update: if isMechanicOwner(settingId);

      // Cancellazione: solo il proprietario
      allow delete: if isMechanicOwner(settingId);
    }

    // ============================================
    // WORKSHOPS COLLECTION
    // ============================================
    match /workshops/{workshopId} {
      // Lettura singola: tutti gli utenti autenticati possono leggere un'officina specifica
      allow get: if isAuthenticated();

      // Lettura query: utenti autenticati possono cercare officine
      // Limitato per performance e sicurezza
      allow list: if isAuthenticated() &&
                     request.query.limit <= 100;

      // Creazione: solo meccanici per se stessi
      allow create: if isMechanic() &&
                      request.resource.data.ownerId == request.auth.uid &&
                      hasRequiredFields(['name', 'email', 'phone', 'ownerId']);

      // Aggiornamento: solo il proprietario dell'officina
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid;

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // ============================================
    // BOOKING REQUESTS COLLECTION
    // ============================================
    match /booking_requests/{bookingId} {
      // Lettura: utente cliente o meccanico dell'officina
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid ||
        resource.data.workshopId == request.auth.uid
      );

      // Creazione: utenti autenticati per prenotare
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      hasRequiredFields(['userId', 'workshopId', 'mechanicId', 'vehicleId', 'serviceName', 'problemDescription']);

      // Aggiornamento: utente o meccanico coinvolti
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid
      );

      // Cancellazione: solo il creatore o il meccanico
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid
      );
    }

    // ============================================
    // QUOTES COLLECTION
    // ============================================
    match /quotes/{quoteId} {
      // Lettura: utente cliente o meccanico dell'officina
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.mechanicId == request.auth.uid
      );

      // Creazione: solo meccanici per preventivi ai propri clienti
      allow create: if isMechanic() &&
                      request.resource.data.mechanicId == request.auth.uid &&
                      hasRequiredFields(['userId', 'workshopId', 'mechanicId', 'vehicleId', 'bookingRequestId']);

      // Aggiornamento: meccanico proprietario o utente (per approvare/rifiutare)
      allow update: if isAuthenticated() && (
        resource.data.mechanicId == request.auth.uid ||
        (resource.data.userId == request.auth.uid &&
         // L'utente può solo cambiare status e campi di approvazione/rifiuto
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedAt', 'rejectedAt', 'rejectionReason', 'updatedAt']))
      );

      // Cancellazione: solo il meccanico proprietario
      allow delete: if isMechanic() && resource.data.mechanicId == request.auth.uid;
    }

    // ============================================
    // TRUSTED WORKSHOPS COLLECTION
    // ============================================
    match /trusted_workshops/{trustId} {
      // Lettura: solo il proprietario
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Creazione: utenti autenticati per se stessi
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      hasRequiredFields(['userId', 'workshopId']);

      // Aggiornamento: solo il proprietario
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Cancellazione: solo il proprietario
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ============================================
    // USER NOTIFICATIONS COLLECTION
    // ============================================
    match /user_notifications/{notificationId} {
      // Lettura: solo il destinatario
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Creazione: sistema o utenti autenticati (per notifiche tra utenti)
      allow create: if isAuthenticated();

      // Aggiornamento: solo il destinatario (per marcare come letto)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Cancellazione: solo il destinatario
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ============================================
    // DEFAULT DENY (sicurezza)
    // ============================================
    // Tutte le altre collezioni sono vietate per impostazione predefinita
  }
}