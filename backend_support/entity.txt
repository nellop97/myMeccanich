// ========== ENTITÀ UTENTE ==========

/**
 * Rappresenta un utente del sistema (proprietario veicolo o meccanico/officina)
 */
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String email;
    
    @Column(nullable = false)
    private String password;
    
    @Column(nullable = false)
    private String firstName;
    
    @Column(nullable = false)
    private String lastName;
    
    @Column
    private String phoneNumber;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserRole role;
    
    @Column
    private String address;
    
    @Column
    private String city;
    
    @Column
    private String postalCode;
    
    @Column
    private String fiscalCode;
    
    @Column
    private String vatNumber; // Per meccanici/officine
    
    @OneToMany(mappedBy = "owner", cascade = CascadeType.ALL)
    private List<Vehicle> ownedVehicles;
    
    @OneToOne(mappedBy = "owner", cascade = CascadeType.ALL)
    private Workshop workshop; // Solo per meccanici
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Enum per i ruoli utente
 */
public enum UserRole {
    VEHICLE_OWNER,
    MECHANIC,
    WORKSHOP_ADMIN
}

// ========== ENTITÀ VEICOLO ==========

/**
 * Rappresenta un veicolo
 */
@Entity
@Table(name = "vehicles")
public class Vehicle {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String licensePlate;
    
    @Column(nullable = false)
    private String vin; // Vehicle Identification Number
    
    @ManyToOne
    @JoinColumn(name = "vehicle_model_id", nullable = false)
    private VehicleModel model;
    
    @ManyToOne
    @JoinColumn(name = "owner_id", nullable = false)
    private User owner;
    
    @Column
    private Integer year;
    
    @Column
    private String color;
    
    @Column
    private Integer mileage;
    
    @Column
    private String engineCode;
    
    @Column
    private String fuelType;
    
    @Column
    private Date registrationDate;
    
    @Column
    private Date lastInspectionDate;
    
    @Column
    private Date nextInspectionDate;
    
    @Column
    private Date insuranceExpiryDate;
    
    @OneToMany(mappedBy = "vehicle", cascade = CascadeType.ALL)
    private List<MaintenanceRecord> maintenanceRecords;
    
    @OneToMany(mappedBy = "vehicle", cascade = CascadeType.ALL)
    private List<Reminder> reminders;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Modello di veicolo (marca e modello)
 */
@Entity
@Table(name = "vehicle_models")
public class VehicleModel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String brand;
    
    @Column(nullable = false)
    private String model;
    
    @Column
    private String generation;
    
    @Column
    private Integer yearFrom;
    
    @Column
    private Integer yearTo;
    
    @OneToMany(mappedBy = "model")
    private List<Vehicle> vehicles;
    
    // Costruttori, getter e setter
}

// ========== ENTITÀ MANUTENZIONE ==========

/**
 * Registra un intervento di manutenzione
 */
@Entity
@Table(name = "maintenance_records")
public class MaintenanceRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "vehicle_id", nullable = false)
    private Vehicle vehicle;
    
    @ManyToOne
    @JoinColumn(name = "workshop_id")
    private Workshop workshop;
    
    @ManyToOne
    @JoinColumn(name = "mechanic_id")
    private User mechanic;
    
    @Column(nullable = false)
    private Date serviceDate;
    
    @Column(nullable = false)
    private Integer mileageAtService;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private MaintenanceType type;
    
    @Column(nullable = false, length = 1000)
    private String description;
    
    @Column(length = 2000)
    private String notes;
    
    @Column
    private BigDecimal cost;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private MaintenanceStatus status;
    
    @Column
    private Date nextServiceDate;
    
    @Column
    private Integer nextServiceMileage;
    
    @OneToMany(mappedBy = "maintenanceRecord", cascade = CascadeType.ALL)
    private List<UsedPart> usedParts;
    
    @OneToOne(mappedBy = "maintenanceRecord")
    private Invoice invoice;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Enum per i tipi di manutenzione
 */
public enum MaintenanceType {
    ROUTINE_SERVICE,
    BRAKE_SERVICE,
    ENGINE_REPAIR,
    TRANSMISSION_REPAIR,
    ELECTRICAL_REPAIR,
    TIRE_CHANGE,
    BATTERY_REPLACEMENT,
    OIL_CHANGE,
    FILTER_REPLACEMENT,
    BELT_REPLACEMENT,
    INSPECTION,
    BODYWORK,
    OTHER
}

/**
 * Enum per lo stato della manutenzione
 */
public enum MaintenanceStatus {
    SCHEDULED,
    IN_PROGRESS,
    COMPLETED,
    CANCELLED
}

/**
 * Rappresenta una parte utilizzata durante la manutenzione
 */
@Entity
@Table(name = "used_parts")
public class UsedPart {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "maintenance_record_id", nullable = false)
    private MaintenanceRecord maintenanceRecord;
    
    @Column(nullable = false)
    private String partName;
    
    @Column
    private String partNumber;
    
    @Column
    private String brand;
    
    @Column(nullable = false)
    private Integer quantity;
    
    @Column
    private BigDecimal unitPrice;
    
    @Column
    private BigDecimal totalPrice;
    
    // Costruttori, getter e setter
}

// ========== ENTITÀ OFFICINA ==========

/**
 * Rappresenta un'officina
 */
@Entity
@Table(name = "workshops")
public class Workshop {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @OneToOne
    @JoinColumn(name = "owner_id", nullable = false)
    private User owner;
    
    @Column(nullable = false)
    private String name;
    
    @Column
    private String description;
    
    @Column(nullable = false)
    private String address;
    
    @Column(nullable = false)
    private String city;
    
    @Column(nullable = false)
    private String postalCode;
    
    @Column
    private String phoneNumber;
    
    @Column
    private String email;
    
    @Column
    private String website;
    
    @Column
    private String vatNumber;
    
    @Column
    private String businessLicense;
    
    @ElementCollection
    @Enumerated(EnumType.STRING)
    private Set<ServiceType> serviceTypes;
    
    @OneToMany(mappedBy = "workshop", cascade = CascadeType.ALL)
    private List<MaintenanceRecord> maintenanceRecords;
    
    @OneToMany(mappedBy = "workshop", cascade = CascadeType.ALL)
    private List<Invoice> invoices;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Tipi di servizi offerti dall'officina
 */
public enum ServiceType {
    GENERAL_REPAIR,
    ENGINE_SPECIALIST,
    BRAKE_SPECIALIST,
    ELECTRICAL_SPECIALIST,
    BODYWORK,
    TIRE_SERVICE,
    INSPECTION_SERVICE,
    EMERGENCY_SERVICE
}

// ========== ENTITÀ FATTURAZIONE ==========

/**
 * Rappresenta una fattura
 */
@Entity
@Table(name = "invoices")
public class Invoice {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String invoiceNumber;
    
    @ManyToOne
    @JoinColumn(name = "workshop_id", nullable = false)
    private Workshop workshop;
    
    @ManyToOne
    @JoinColumn(name = "customer_id", nullable = false)
    private User customer;
    
    @OneToOne
    @JoinColumn(name = "maintenance_record_id")
    private MaintenanceRecord maintenanceRecord;
    
    @Column(nullable = false)
    private Date issueDate;
    
    @Column
    private Date dueDate;
    
    @Column(nullable = false)
    private BigDecimal subtotal;
    
    @Column(nullable = false)
    private BigDecimal vatRate;
    
    @Column(nullable = false)
    private BigDecimal vatAmount;
    
    @Column(nullable = false)
    private BigDecimal total;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private InvoiceStatus status;
    
    @Column
    private Date paidDate;
    
    @Enumerated(EnumType.STRING)
    private PaymentMethod paymentMethod;
    
    @Column(length = 1000)
    private String notes;
    
    @OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL)
    private List<InvoiceItem> items;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Voce di fattura
 */
@Entity
@Table(name = "invoice_items")
public class InvoiceItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "invoice_id", nullable = false)
    private Invoice invoice;
    
    @Column(nullable = false)
    private String description;
    
    @Column(nullable = false)
    private Integer quantity;
    
    @Column(nullable = false)
    private BigDecimal unitPrice;
    
    @Column(nullable = false)
    private BigDecimal totalPrice;
    
    @Enumerated(EnumType.STRING)
    private ItemType itemType;
    
    // Costruttori, getter e setter
}

/**
 * Enum per lo stato della fattura
 */
public enum InvoiceStatus {
    DRAFT,
    SENT,
    PAID,
    OVERDUE,
    CANCELLED
}

/**
 * Enum per il metodo di pagamento
 */
public enum PaymentMethod {
    CASH,
    BANK_TRANSFER,
    CREDIT_CARD,
    DEBIT_CARD,
    CHECK
}

/**
 * Enum per il tipo di voce in fattura
 */
public enum ItemType {
    LABOR,
    PART,
    SERVICE,
    OTHER
}

// ========== ENTITÀ PROMEMORIA ==========

/**
 * Rappresenta un promemoria per il proprietario del veicolo
 */
@Entity
@Table(name = "reminders")
public class Reminder {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "vehicle_id", nullable = false)
    private Vehicle vehicle;
    
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @Column(nullable = false)
    private String title;
    
    @Column(length = 1000)
    private String description;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ReminderType type;
    
    @Column
    private Date reminderDate;
    
    @Column
    private Integer reminderMileage;
    
    @Column(nullable = false)
    private Boolean isActive;
    
    @Column
    private Boolean isRecurring;
    
    @Column
    private Integer recurringIntervalDays;
    
    @Column
    private Integer recurringIntervalMileage;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    
    // Costruttori, getter e setter
}

/**
 * Enum per i tipi di promemoria
 */
public enum ReminderType {
    MAINTENANCE_DUE,
    INSPECTION_DUE,
    INSURANCE_EXPIRY,
    REGISTRATION_RENEWAL,
    TIRE_ROTATION,
    OIL_CHANGE,
    CUSTOM
}